{"version":3,"sources":["components/card/card.comp.jsx","components/cardlist/cardlist.comp.jsx","components/searchBox/searcBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monister","id","name","email","CardList","monisters","map","ind","key","SearchBox","placeholder","onChaneHandeler","type","onChange","App","searchHandeler","e","searchVal","target","value","filterMonisters","filterResults","setState","state","filter","toLowerCase","includes","fetch","then","res","json","data","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGaA,G,YAAO,SAACC,GACpB,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,gCACR,4BAAKJ,EAAMG,SAASE,MACpB,2BAAIL,EAAMG,SAASG,UCIPC,EARE,SAACP,GACjB,OACC,yBAAKC,UAAU,aACbD,EAAMQ,UAAUC,KAAI,SAACN,EAAUO,GAAX,OAAmB,kBAAC,EAAD,CAAMP,SAAUA,EAAUQ,IAAG,UAAKR,EAASE,KAAd,YAAsBK,UCHjFE,G,MAAY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBACxC,OAAO,2BAAOC,KAAK,SAASd,UAAU,SAASY,YAAaA,EAAaG,SAAUF,MCoDrEG,G,kBAlDd,WAAYjB,GAAQ,IAAD,8BAClB,4CAAMA,KAkBPkB,eAAiB,SAACC,GACjB,IAAMC,EAAYD,EAAEE,OAAOC,MACrBC,EAAkB,EAAKC,cAAcJ,GAC3C,EAAKK,SAAS,CACbL,YACAG,qBAxBiB,EA4BnBC,cAAgB,SAACJ,GAMhB,OALsB,EAAKM,MAAnBlB,UAEcmB,QAAO,SAACR,GAC7B,OAAOA,EAAEd,KAAKuB,cAAcC,SAAST,EAAUQ,mBA9BhD,EAAKF,MAAQ,CACZlB,UAAW,GACXe,gBAAiB,GACjBH,UAAW,IALM,E,iFASE,IAAD,OACnBU,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQF,MAAK,SAACG,GACnFC,QAAQC,IAAI,YAAaF,GACzB,EAAKT,SAAS,CACbjB,UAAW0B,EACXX,gBAAiBW,S,+BAuBV,IAAD,EAC0CG,KAAKX,MAAzBH,GADtB,EACAf,UADA,EACWY,UADX,EACsBG,iBAE9B,OACC,yBAAKtB,UAAU,OACd,gDACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,gBAAiBuB,KAAKnB,iBAC/D,kBAAC,EAAD,CAAUV,UAAWe,S,GA7CPe,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.b29d9fed.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nexport const Card = (props) => {\n\treturn (\n\t\t<div className=\"card_container\">\n\t\t\t<img src={`https://robohash.org/${props.monister.id}.png?set=set2&size=180x180`} />\n\t\t\t<h2>{props.monister.name}</h2>\n\t\t\t<p>{props.monister.email}</p>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport './cardlist.css';\nimport { Card } from '../card/card.comp';\n\nconst CardList = (props) => {\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{props.monisters.map((monister, ind) => <Card monister={monister} key={`${monister.name}_${ind}`} />)}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nimport './searchBox.css';\n\nexport const SearchBox = ({ placeholder, onChaneHandeler }) => {\n\treturn <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={onChaneHandeler} />;\n};\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport CardList from './components/cardlist/cardlist.comp';\nimport { SearchBox } from './components/searchBox/searcBox.component';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmonisters: [],\n\t\t\tfilterMonisters: [],\n\t\t\tsearchVal: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then((res) => res.json()).then((data) => {\n\t\t\tconsole.log('data >>> ', data);\n\t\t\tthis.setState({\n\t\t\t\tmonisters: data,\n\t\t\t\tfilterMonisters: data\n\t\t\t});\n\t\t});\n\t}\n\n\tsearchHandeler = (e) => {\n\t\tconst searchVal = e.target.value;\n\t\tconst filterMonisters = this.filterResults(searchVal);\n\t\tthis.setState({\n\t\t\tsearchVal,\n\t\t\tfilterMonisters\n\t\t});\n\t};\n\n\tfilterResults = (searchVal) => {\n\t\tconst { monisters } = this.state;\n\t\tlet filterVal;\n\t\tfilterVal = monisters.filter((e) => {\n\t\t\treturn e.name.toLowerCase().includes(searchVal.toLowerCase());\n\t\t});\n\t\treturn filterVal;\n\t};\n\n\trender() {\n\t\tconst { monisters, searchVal, filterMonisters } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monister Rolodex</h1>\n\t\t\t\t<SearchBox placeholder=\"Monister Search\" onChaneHandeler={this.searchHandeler} />\n\t\t\t\t<CardList monisters={filterMonisters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}